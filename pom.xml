<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <prerequisites>
        <maven>3.2.0</maven>
    </prerequisites>

    <groupId>com.clutchproject</groupId>
    <artifactId>parent</artifactId>
    <version>0.1-SNAPSHOT</version>
    <name>parent</name>

    <description><![CDATA[
        Parent POM with commonly used pre-configured features
    ]]></description>
    <url>https://github.com/clutchproject/parent</url>
    <inceptionYear>2016</inceptionYear>
    <organization>
        <name>Clutch Project</name>
        <url>https://www.clutchproject.com</url>
    </organization>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>https://raw.githubusercontent.com/clutchproject/parent/master/LICENSE.txt</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>bborisov</id>
            <name>Borislav Borisov</name>
            <email>bborisov@protonmail.com</email>
            <roles>
                <role>Architect</role>
                <role>Developer</role>
            </roles>
            <timezone>Europe/London</timezone>
        </developer>
    </developers>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/clutchproject/parent/issues</url>
    </issueManagement>

    <ciManagement>
        <system>travis</system>
        <url>https://travis-ci.org/clutchproject/parent</url>
    </ciManagement>

    <scm>
        <connection>scm:git:git@github.com:clutchproject/parent.git</connection>
        <developerConnection>scm:git:git@github.com:clutchproject/parent.git</developerConnection>
        <url>https://github.com/clutchproject/parent</url>
        <tag>HEAD</tag>
    </scm>

    <distributionManagement>
        <repository>
            <id>oss.sonatype.org</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/
            </url>
        </repository>
        <snapshotRepository>
            <id>oss.sonatype.org</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <repositories>
        <!--
        You should keep it empty in your project.
        @see http://www.sonatype.com/people/2009/02/why-putting-repositories-in-your-poms-is-a-bad-idea/
        -->
    </repositories>

    <pluginRepositories>
        <!--
        You should keep it empty in your project.
        @see http://www.sonatype.com/people/2009/02/why-putting-repositories-in-your-poms-is-a-bad-idea/
        -->
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <!--
                Google Core libraries for Java 6+
                @link https://github.com/google/guava
                -->
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>19.0</version>
            </dependency>
            <dependency>
                <!--
                Compile-time annotations.
                @see http://projectlombok.org/features/index.html
                -->
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.16.10</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <!--
                We are using JUnit framework for unit test organization and management.
                This framework is the most stable and mature in the market.
                @link http://www.junit.org
                -->
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
            </dependency>
            <dependency>
                <!--
                Fluent assertions and matchers for unit tests.
                @link http://joel-costigliola.github.io/assertj/index.html
                -->
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>2.5.0</version>
            </dependency>
            <dependency>
                <!--
                Mockito is used as a mocking library during testing.
                @link http://mockito.org/
                -->
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>2.1.0-RC.1</version>
            </dependency>
            <dependency>
                <!--
                Logging abstraction for various logging frameworks.
                @link http://www.slf4j.org/
                -->
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.21</version>
            </dependency>
            <dependency>
                <!--
                The base for logging through Logback.
                @link http://logback.qos.ch/
                -->
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-core</artifactId>
                <version>1.1.7</version>
            </dependency>
            <dependency>
                <!--
                Use Logback for all logging.
                @link http://logback.qos.ch/
                -->
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.1.7</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <resources>
            <!--
            Filter resources in "process-resources" phase
            @link http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
            -->
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <!--
            Filter resources in "process-resources" phase
            @link http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
            -->
            <testResource>
                <directory>${basedir}/src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.4.1</version>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.2</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                    <configuration>
                        <createChecksum>true</createChecksum>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.5.1</version>
                    <configuration>
                        <source>1.7</source>
                        <target>1.7</target>
                        <optimize>true</optimize>
                        <showWarnings>true</showWarnings>
                        <showDeprecation>true</showDeprecation>
                        <testExcludes>
                            <exclude>**/package-info.java</exclude>
                        </testExcludes>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>2.10</version>
                </plugin>

                <plugin>
                    <artifactId>maven-help-plugin</artifactId>
                    <version>2.2</version>
                </plugin>

                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.10.4</version>
                </plugin>
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.1</version>
                </plugin>
                <plugin>
                    <!--
                    Starts unit tests, protocols their results and creates
                    a summary report. It is required to send testing protocol
                    to the STDOUT as well, not only to the file.
                    -->
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.19.1</version>
                    <configuration>
                        <useFile>false</useFile>
                        <runOrder>random</runOrder>
                        <trimStackTrace>false</trimStackTrace>
                        <failIfNoTests>false</failIfNoTests>
                        <failIfNoSpecifiedTests>true</failIfNoSpecifiedTests>
                        <parallel>all</parallel>
                        <parallelTestsTimeoutInSeconds>0</parallelTestsTimeoutInSeconds>
                        <parallelTestsTimeoutForcedInSeconds>0</parallelTestsTimeoutForcedInSeconds>
                        <perCoreThreadCount>true</perCoreThreadCount>
                        <threadCount>4</threadCount>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.5.3</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>2.2</version>
                    <configuration>
                        <generateBackupPoms>false</generateBackupPoms>
                    </configuration>
                </plugin>
                <plugin>
                    <!--
                    Create a jar of the source files of the __current__ project.
                    -->
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.0.1</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <!--
            Enable unit testing. The profile is activated when you have
            src/test/java directory in the project. It will add junit,
            assertj, and mockito artifacts to the classpath ("test" scope).
            -->
            <id>unit-tests</id>
            <activation>
                <file>
                    <exists>${basedir}/src/test/java</exists>
                </file>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.assertj</groupId>
                    <artifactId>assertj-core</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.mockito</groupId>
                    <artifactId>mockito-core</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <!--
            Enable Logback and SLF4J binding for testing. The profile is activated
            when you have src/test/resources/logback-test.xml. When this file
            is present it means that you want your SLF4J logs to be sent to
            Logback during testing time. The profile will add required bindings
            to the classpath.
            -->
            <id>tests-logging</id>
            <activation>
                <file>
                    <exists>${basedir}/src/test/resources/logback-test.xml</exists>
                </file>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </dependency>
                <dependency>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </dependency>
                <dependency>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <!--
            Sign artifacts before deployment with GPG. The profile is implicitly
            enabled by defining "gpg.keyname" property.
            @link to-where-it-has-to-go
            -->
            <id>gpg-sign</id>
            <activation>
                <property>
                    <name>gpg.keyname</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <!--
                        Sign project artifact, the POM, and attached artifacts
                        with GnuPG for deployment. GPG keys have to be published
                        beforehand.

                        @link http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/
                        -->
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.6</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!--
            Deploy artifact to oss.sonatype.org, as long as they meet the requirements.
            -->
            <id>sonatype</id>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <artifactId>maven-deploy-plugin</artifactId>
                            <configuration>
                                <skip>true</skip>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>
                    <plugin>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>jar-sources</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!--
                        Generate -javadoc.jar artifact, required by Maven Central.
                        -->
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>javadoc</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- @see http://www.sonatype.com/books/nexus-book/reference/staging-sect-deployment.html -->
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <version>1.6.7</version>
                        <extensions>true</extensions>
                        <configuration>
                            <serverId>oss.sonatype.org</serverId>
                            <nexusUrl>https://oss.sonatype.org/</nexusUrl>
                            <description>${project.version}</description>
                        </configuration>
                        <executions>
                            <execution>
                                <id>deploy-to-sonatype</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>deploy</goal>
                                    <goal>release</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>